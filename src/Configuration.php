<?php

declare(strict_types=1);

namespace KrystalCode\Acumatica\Api;

/**
 * Holds the configuration necessary for discovery and for API clients.
 */
class Configuration
{
    /**
     * The namespace used to hold the API generated by OpenAPI.
     *
     * For example, `MyApplication\Acumatica\Api\Default\v22_200_001`.
     *
     * @var string
     */
    protected $clientNamespace;

    /**
     * Constructs a new Configation object.
     *
     * @param string $apiId
     *   The ID of the API e.g. Default.
     * @param string $apiVersion
     *   The version of the API e.g. 22.200.001.
     * @param string $clientNamespace
     *   The base namespace of the API client generated by OpenApi.
     * @param array $authentication
     *   An associative array containing details about the authentication to
     *   use. For supported values please see the session manager that this
     *   configuration will be passed to.
     * @param array $options
     *   An associative array with additional options. Supported options are:
     *   - debug (?bool): Debug mode to be passed to the client configuration
     *     generated by the OpenAPI generator.
     *   - debug (?string): Debug file to be passed to the client configuration
     *     generated by the OpenAPI generator.
     *
     * @I Support api_key authentication
     *    type     : feature
     *    priority : high
     *    labels   : authentication
     * @I Provide objects for holding authentication instead of arrays
     *    type     : task
     *    priority : high
     *    labels   : authentication, validation
     *    notes    : To have better control over API and validation. Requires
     *               better understanding of the needs of different supported
     *               types of authentication before designing this.
     */
    public function __construct(
        protected string $apiId,
        protected string $apiVersion,
        protected string $baseNamespace,
        protected array $authentication,
        protected array $options = []
    ) {
        $this->clientNamespace = sprintf(
            "%s\\%s\\%s",
            $this->baseNamespace,
            $this->apiId,
            'v' . str_replace('.', '_', $this->apiVersion)
        );

        // Set default options.
        $this->options = array_merge(
            [
                // Client configuration options.
                // If left to `null`, the defaults in the client configuration
                // generated by the OpenAPI generator will take effect.
                'debug' => null,
                'debug_file' => null,
            ],
            $this->options
        );
    }

    /**
     * Instantiates and returns a client configuration object.
     *
     * This is the configuration object instantiated using the class provided by
     * the client generated by the OpenAPI generator.
     *
     * @return object
     *   The client configuration object.
     */
    public function toClientConfiguration(): object
    {
        $class = $this->clientNamespace . '\Configuration';
        $clientConfig = new $class();

        // The session manager is responsible for pasing the access token or
        // cookie to the client configuration. We therefore do not need to do
        // this here.
        if ($this->options['debug'] !== null) {
            $clientConfig->setDebug($this->options['debug']);
        }
        if ($this->options['debug_file'] !== null) {
            $clientConfig->setDebugFile($this->options['debug_file']);
        }

        return new $class();
    }

    /**
     * Returns the authentication details.
     *
     * @return array
     *   The authentication details array.
     */
    public function getAuthentication(): array
    {
        return $this->authentication;
    }

    /**
     * Returns the additional configuration options.
     *
     * @return array
     *   The configuration options array.
     */
    public function getOptions(): array
    {
        return $this->options;
    }

    /**
     * Returns the client namespace.
     *
     * @return string
     *   The client namespace.
     */
    public function getClientNamespace(): string
    {
        return $this->clientNamespace;
    }
}
