<?php

declare(strict_types=1);

namespace KrystalCode\Acumatica\Api\Discovery;

use GuzzleHttp\ClientInterface;
use KrystalCode\Acumatica\Api\Session\SessionManagerInterface;

/**
 * Facilitates discovery of Acumatica API clients.
 *
 * API clients must be generated by OpenAPI generator. The discovery makes it
 * easy to discover and instantiate client so that API calls can be made.
 *
 * @I Document how to generate and connect OpenAPI clients
 *    type     : task
 *    priority : high
 *    labels   : documentation
 */
class Discovery
{
    /**
     * Constructs a new Discovery object.
     *
     * @param \GuzzleHttp\ClientInterface $client
     *   The Guzzle API client.
     * @param \KrystalCode\Acumatica\Api\Session\SessionManagerInterface $sessionManager
     *   The session manager.
     */
    public function __construct(
        protected ClientInterface $client,
        protected SessionManagerInterface $sessionManager
    ) {
    }

    /**
     * Returns the instantiated OpenAPI client.
     *
     * @param string $name
     *   The method being called.
     * @param mixed $arguments
     *   The arguments to be passed to the method.
     *
     * @return mixed
     *   The API client object.
     *
     * @throws \InvalidArgumentException
     *   When the requested OpenAPI client was not found.
     */
    public function __call(string $name, mixed $arguments)
    {
        $namespace = $this->sessionManager
            ->getConfiguration()
            ->getClientNamespace();
        $class = $namespace . '\\Api\\' . ucfirst($name) . 'Api';
        if (class_exists($class)) {
            return new ClientProxy(
                new $class(
                    $this->client,
                    $this->sessionManager->connect()
                ),
                $name
            );
        }

        throw new \InvalidArgumentException(sprintf(
            'Unknown OpenAPI client "%s".',
            $name
        ));
    }
}
