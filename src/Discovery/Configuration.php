<?php

declare(strict_types=1);

namespace KrystalCode\Acumatica\Api\Discovery;

/**
 * Holds the configuration necessary for discovery and for API clients.
 */
class Configuration
{
    /**
     * The namespace used to hold the API generated by OpenAPI.
     *
     * For example, `MyApplication\Acumatica\Api\Default\v22_200_001`.
     *
     * @var string
     */
    protected $clientNamespace;

    /**
     * Constructs a new Configation object.
     *
     * @param string $apiId
     *   The ID of the API e.g. Default.
     * @param string $apiVersion
     *   The version of the API e.g. 22.200.001.
     * @param string $clientNamespace
     *   The base namespace of the API client generated by OpenApi.
     * @param array $authentication
     *   An associative array containing details about the authentication to
     *   use. Currently supported array elements:
     *   - type: (string, required) The authentication type. Supported types are
     *     - access_token: Use for authenticating with an access token (OAuth).
     *   - token: (string, optional) The access token to use. Required if type
     *     is `access_token`.
     *
     * @I Support api_key authentication
     *    type     : feature
     *    priority : high
     *    labels   : authentication
     */
    public function __construct(
        protected string $apiId,
        protected string $apiVersion,
        protected string $baseNamespace,
        protected array $authentication
    ) {
        $this->clientNamespace = sprintf(
            "%s\\%s\\%s",
            $this->baseNamespace,
            $this->apiId,
            'v' . str_replace('.', '_', $this->apiVersion)
        );
        $this->validateAuthentication();
    }

    /**
     * Instantiates and returns a client configuration object.
     *
     * This is the configuration object instantiated using the class provided by
     * the client generated by the OpenAPI generator.
     *
     * @return object
     *   The client configuration object.
     */
    public function toClientConfiguration(): object
    {
        $class = $this->clientNamespace . '\Configuration';
        $clientConfiguration = new $class();

        switch ($this->authentication['type']) {
            case 'access_token':
                $clientConfiguration->setAccessToken($this->authentication['token']);
                break;
        }

        return $clientConfiguration;
    }

    /**
     * Returns the client namespace.
     *
     * @return string
     *   The client namespace.
     */
    public function getClientNamespace(): string
    {
        return $this->clientNamespace;
    }

    /**
     * Validates the authentication details provided.
     *
     * @throws \InvalidArgumentException
     *   When the authentication details do not provide the required elements.
     */
    protected function validateAuthentication()
    {
        if (!isset($this->authentication['type'])) {
            throw new \InvalidException('The authentication type is required.');
        }

        switch ($this->authentication['type']) {
            case 'access_token':
                if (!isset($this->authentication['token'])) {
                    throw new \InvalidException(
                        'The access token must is required.'
                    );
                }
                break;

            default:
                throw new \InvalidArgumentException(sprintf(
                    'Unsupported authentication type "%s".',
                    $this->authentication['type']
                ));
        }
    }
}
